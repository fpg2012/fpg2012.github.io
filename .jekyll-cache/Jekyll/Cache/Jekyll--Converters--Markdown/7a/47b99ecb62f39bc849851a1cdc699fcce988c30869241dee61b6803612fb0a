I"r<blockquote>
  <p>不懂魔方。本文推出的方法可能很慢很蠢，实测速度还不如暴力。不过毕竟是自己推出来的，还是记录一下。</p>
</blockquote>

<p>班长来串寝，带来两个魔方，跟我另一个玩魔方的舍友讨论得热烈。他们给了我一个「简单」的三阶金字塔，并说「你拼好一个面他就还原了，拼不好就再拼，总是会还原的」。我的魔方水平限于三阶还原一个面，听他们这么说，于是我试了一下，然而费了好大劲才拼出一个面。之后才找到一点技巧，算是摸到了三阶金字塔的门槛。</p>

<p>首先定义三种块：</p>

<ol>
  <li>有三个面的为角块（A）</li>
  <li>有两个面的为棱块（B）</li>
  <li>只有一个面的为中心块（C）</li>
</ol>

<p>当晚，我得到一个「准基本操作」，还原一个面：</p>

<ol>
  <li>把角块（A）还原（找到有相同颜色面的三个角，把同色的面转到一个平面上）</li>
  <li>把中心块（B）还原（中心块是和角块相邻的块，一开始我甚至不知道这点）（转动角块下面的那一层，相邻的中心块还原）</li>
  <li>把其余的棱块凑上去</li>
</ol>

<p>到这个时候，还原其他三个面的角块和中心块是分分钟的事情了。</p>

<p>将上面两步结合起来，就得到了「预处理」操作：</p>

<ol>
  <li>还原所有角块和中心块</li>
  <li>还原一个面</li>
</ol>

<p>其实预处理之后，暴力破解已经很容易了。不过我不满足于此，因为我不知道为什么能还原……经常是转着转着莫名其妙就还原了。到了第二天的操作系统课我还是在乱转。</p>

<p>预处理后，我们称红色中心块和角块所在的面为「红面」，其他面以此类推。回去后我发现，预处理后就只剩下棱块的排列和方向的问题了。所谓「排列问题」，指两个棱块位置互换了，比如红蓝交界的棱块和红绿交界的棱块互换位置；所谓「方向问题」，指棱块的位置对了，但方向不对，比如，红蓝棱块位于红蓝面交界上，但是棱块的红面在魔方的蓝面上，棱块的蓝面在魔方的红面上。我发现不可能出现只有一个棱块方向错误的情况（不过我没有证明）。解决了棱块的排列问题和方向问题，金字塔魔方的还原就解决了。</p>

<p>然而怎么解决这几个问题呢？我起初毫无头绪，只是在瞎转魔方找感觉，感觉得找到几个基本操作才行。一开始我找的基本操作是「转顶部角块」、「顶部角块和其下层」、「翻转整个魔方，换一个面做正面」。然而这几个操作太过于基本，虽然确实可以构成所有操作，但是对于实践没有什么指导意义，用这几个基本操作来思考，可以说是寸步难行，试了一个小时都没有头绪。不过过程中我发现了解决方向问题的一个方法，下面再表述。</p>

<p>后来我观察我还原一个面的过程，发现有一个操作至关重要，这个操作可以使一个面的三个棱块互换。这个操作我起初只知道怎么做，但不知道应该怎么表述（用上面那三个基本操作来表述就太过繁琐了）。大概是一个面转一下，接过另一个面的棱块，再转回去。后来我发现用角块和其相邻层的旋转作为基本操作比较简便。四个基本操作定义如下图。</p>

<p>从四个基本操作出发，可以很好地表述四种面上的三轮换。起初我只找到了下面的$\alpha$，并绞尽脑汁想$\alpha$怎么用，但是都徒劳。直到我用纸笔描述额一下，顺藤摸瓜找到其他三个。我称下面为四个「面三轮换」操作。</p>

<ol>
  <li>$\alpha = p^{-1}kpk^{-1}$，效果是右面的三个棱块顺时针轮换（从右往左看）</li>
  <li>$\beta = p^{-1}ipi^{-1}$，效果是左面的三个棱块逆时针轮换（从左往右看）</li>
  <li>$\gamma = i^{-1}kik^{-1}$，效果是正面的三个棱块逆时针轮换（从前往后看）</li>
  <li>$\delta = p^{-1}jpj^{-1}$，效果是底面三个棱块逆时针轮换（从下往上看）</li>
</ol>

<p>对棱块进行命名和编号，如图。</p>

<p>上左、上右、上后、下左、下右、下前分别标为1到6。于是四种操作的效果如下图。</p>

<p>根据排列的知识和上面的标号，我发现排列问题已经被解决了。当我们完成预处理后，实际上只剩三个上棱块需要还原，由于只有三个棱块，因此，无非只有三种情况：</p>

<ol>
  <li>三个块位置都正确</li>
  <li>三个块位置都不正确（轮换）</li>
  <li>一个块位置正确，另外两个块互换</li>
</ol>

<p>对于2、3情况，如果情况是可还原的，就一定可以利用几个面三轮换操作还原。如果以排列的方式表述这个问题，无非如下：</p>

<p>利用排列，可表述四个面三轮换。
\(\alpha = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp;4 &amp; 5 &amp; 6 \\ 1 &amp; 5 &amp; 2 &amp; 4 &amp; 3 &amp; 6\end{pmatrix}\)</p>

\[\beta = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp;4 &amp; 5 &amp; 6 \\ 3 &amp; 1 &amp; 4 &amp; 1 &amp; 5 &amp; 6\end{pmatrix}\]

\[\gamma = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp;4 &amp; 5 &amp; 6 \\ 6 &amp; 1 &amp; 3 &amp; 4 &amp; 5 &amp; 2\end{pmatrix}\]

\[\delta = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp;4 &amp; 5 &amp; 6 \\ 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6\end{pmatrix}\]

<p>对于情况2，我们只需用上面四者合成$\omega$即可，称$\omega$为「角三轮换」：
\(\omega = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp;4 &amp; 5 &amp; 6 \\ 2 &amp; 3 &amp; 1 &amp; 4 &amp; 5 &amp; 6\end{pmatrix}\)
对于情况3，我们只需用上面四者合成$\sigma$即可，称$\sigma$为「棱块对换」：
\(\sigma = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp;4 &amp; 5 &amp; 6 \\ 2 &amp; 1 &amp; 3 &amp; 4 &amp; 5 &amp; 6\end{pmatrix}\)
那么如何求解呢？我选择使用程序枚举。</p>

<p>程序如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;utility&gt;
#include &lt;string&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">print_arr</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">Arrangement</span> <span class="p">{</span>
    <span class="n">Arrangement</span><span class="p">(</span><span class="k">const</span> <span class="n">initializer_list</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">l</span><span class="p">,</span> <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="s">""</span><span class="p">)</span> <span class="o">:</span> <span class="n">name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">item</span> <span class="o">:</span> <span class="n">l</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="o">++</span><span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">Arrangement</span><span class="p">(</span><span class="k">const</span> <span class="n">Arrangement</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">)</span> <span class="o">:</span> <span class="n">name</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">Arrangement</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="s">""</span><span class="p">)</span> <span class="o">:</span> <span class="n">name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">arrange</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
    <span class="kt">void</span> <span class="n">apply</span><span class="p">(</span><span class="kt">int</span> <span class="n">array</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="k">const</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">temp</span><span class="p">[</span><span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="n">print</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Arrangement "</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="s">" : ("</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">};</span>
        <span class="n">print_arr</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
        <span class="n">apply</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
        <span class="n">print_arr</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">")"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">Arrangement</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">Arrangement</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">b</span><span class="p">.</span><span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">Arrangement</span> <span class="k">operator</span><span class="o">*</span><span class="p">(</span><span class="k">const</span> <span class="n">Arrangement</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">arrange</span><span class="p">[</span><span class="n">arrange</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">Arrangement</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">name</span> <span class="o">+</span> <span class="n">b</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="n">Arrangement</span> <span class="n">alpha</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">},</span> <span class="n">beta</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">},</span> <span class="n">gamma</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="n">delta</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
<span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Arrangement</span><span class="o">&gt;</span> <span class="n">s</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">enumarate_all</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">new_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Arrangement</span><span class="o">&gt;</span> <span class="n">new_set</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">a</span> <span class="o">:</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">b</span> <span class="o">:</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"find new OP"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">a</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"and"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">b</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"forms"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">temp</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">new_set</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">new_size</span> <span class="o">=</span> <span class="n">new_set</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="n">new_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">new_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">n</span> <span class="o">:</span> <span class="n">new_set</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">s</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"total: "</span> <span class="o">&lt;&lt;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">alpha</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"α"</span><span class="p">;</span>
    <span class="n">beta</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"β"</span><span class="p">;</span>
    <span class="n">gamma</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"γ"</span><span class="p">;</span>
    <span class="n">delta</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"δ"</span><span class="p">;</span>
    <span class="n">alpha</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
    <span class="n">beta</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
    <span class="n">gamma</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
    <span class="n">delta</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
    <span class="c1">// (alpha * beta).print();</span>
    <span class="n">s</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">alpha</span><span class="p">);</span>
    <span class="n">s</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">beta</span><span class="p">);</span>
    <span class="n">s</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">gamma</span><span class="p">);</span>
    <span class="n">s</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">delta</span><span class="p">);</span>
    <span class="n">enumarate_all</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>程序会输出四个面三轮换组成的所有排列。果然，我在输出中找到了$\omega$和$\omega^{-1}$</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Arrangement δαγβα : (
1 2 3 4 5 6 
2 3 1 4 5 6 
)
Arrangement δαδδγ : (
1 2 3 4 5 6 
3 1 2 4 5 6 
)
</code></pre></div></div>

<p>由于$\omega^{-1}$看起来更简单，所以我偏爱后者。这就能够解决角三轮换的问题。不过我没有找到棱对换的排列，说明这种现象对于正确的魔方是不可能存在的，实践中确实也没有碰到。至此排列问题解决。</p>

<p>关于方向问题，我发现我可以同时调换两个块的方向，操作如下，我成为「二倒向」。
\(s = p^{-1}kpk^{-1}\cdot pj^{-1}p^{-1}j\)
原理大概是用一次三轮换，把下右、上右、上后轮换一下，再把刚刚从底面换上来的块换回底面，不过执行的「手性」和和刚刚不同。（注意到$\alpha$是轮换右面的三个块，可以有一个<strong>镜像</strong>的操作轮换左面的三个块，这里执行$\alpha$后执行的操作大概是$\delta$的镜像，所以说二者手性不同）。至此方向问题解决（奇数个棱块方向不同是不可能的）。</p>

<p>最后，一套方法开发出来了，经测可用。但是……不比暴力快。</p>
:ET